import pandas as pd
from tqdm import tqdm
import os

def qa_reader(path = '/Users/thibaultbret/output'):
    '''
    Reads the quality assessment output files generated by CheckM and converts all the qa data into a Pandas dataframe
    that is then converted into an Excel sheet.
    '''
    #find the qa files
    total_qa_df = pd.DataFrame()
    os.chdir(path)
    qa_files = [file for file in sorted(os.listdir(path)) if not file.startswith('.')]

    #gather the data
    for qa_file in tqdm(qa_files):
        names = ['Bin Id','Marker lineage','#genomes','#markers','#marker sets','0','1','2','3','4','5+','Completeness','Contamination','Strain heterogeneity']
        data = []
        with open(qa_file) as fl:
            for line in fl.readlines()[2:]:
                if not line.startswith('-'):
                    data.append([l for l in line.split(' ') if not l in ['','\n'] and not l.startswith('(')])
        qa_df = pd.DataFrame(data, columns = names)
        dtypes_dict = {'Bin Id':str, 'Marker lineage':str, '#genomes':int, '#markers':int, '#marker sets':int, '0':int, '1':int, '2':int, '3':int, '4':int, '5+':int, 'Completeness':float, 'Contamination':float, 'Strain heterogeneity':float}
        qa_df = qa_df.astype(dtypes_dict)
        qa_df['Organism'] = qa_file.replace('qa_','').replace('.txt','')
        total_qa_df = total_qa_df.append(qa_df, ignore_index=True)
    
    #export excel sheet 
    total_qa_df.to_excel('/Users/thibaultbret/total_qa_df.xlsx', index = False)


def qa_filterer(path = '/Users/thibaultbret', total_qa_xlsx = '/Users/thibaultbret/total_qa_df0.xlsx', completeness_th = 0.9, contamination_th = 0.05):
    '''
    Reads the "total_qa_df.xlsx" Excel sheet and, based on the completeness and the percentage of contamination of each genome, given
    the predetermined threshold parameters, filters out genomes that are not fit for the analysis.
    '''
    #Extract the excel qa sheet and filter out uninformative genomes
    total_qa_df = pd.read_excel(total_qa_xlsx)
    completeness_mask = total_qa_df['Completeness'] > completeness_th * 100
    contamination_mask = total_qa_df['Contamination'] < contamination_th * 100
    filtered_qa_df = total_qa_df[~(completeness_mask & contamination_mask)]
    genomes_to_remove = list(filtered_qa_df['Bin Id'])

    #create a copy of the Genome folder without the uninformative genomes
    os.chdir(path)
    os.system('cp -r Genomes Genomes_filtered')
    new_path = path + '/Genomes_filtered'
    os.chdir(new_path)
    genome_folders = [folder for folder in sorted(os.listdir(new_path)) if not folder.startswith('.')]
    #move all .fna files to the newly created directory
    for genome_folder in genome_folders:
        os.system('mv ' + genome_folder + '/*.fna ' + new_path)
    #remove all nested directories
    for genome_folder in genome_folders:
        os.system('rm -r ' + genome_folder)
    #delete the .fna files that correspond to genomes that should be filtered out
    fna_files = [file for file in sorted(os.listdir(new_path)) if not file.startswith('.')]
    for fna_file in fna_files:
        if fna_file in [gen + '.fna' for gen in genomes_to_remove]:
            os.remove(fna_file)



if __name__ == "__main__":
    qa_reader()
    qa_filterer()